# Copyright 2015 Applied Research Laboratories, the University of
# Texas at Austin.
#
#    This file is part of DoxygenPlugin.
#
#    DoxygenPlugin is free software: you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as
#    published by the Free Software Foundation, either version 3 of
#    the License, or (at your option) any later version.
#
#    DoxygenPlugin is distributed in the hope that it will be
#    useful, but WITHOUT ANY WARRANTY; without even the implied
#    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#    See the GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with DoxygenPlugin.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: John Knutson
#
# Provide a mechanism for linking to Doxygen-generated diagrams.

=begin TML

---+ package Foswiki::Plugins::DoxygenPlugin

Define a Foswiki macro to generate links to diagrams generated by Doxygen.

=cut

package Foswiki::Plugins::DoxygenPlugin;

# Always use strict to enforce variable scoping
use strict;
use warnings;

use Foswiki::Func    ();    # The plugins API
use Foswiki::Plugins ();    # For the API version

use version; our $VERSION = version->declare("v1.0.1");
our $RELEASE           = '1.0.1';
our $SHORTDESCRIPTION  = 'Interface to Doxygen-generated documentation';
our $NO_PREFS_IN_TOPIC = 1;

#
# General plugin information
#

# supporting xml, html and text formats would be somewhat dangerous
# TODO make these configurable
my @validFormats    = qw(png svg eps pdf);
my @validTypes      = qw(coll inherit);
my @validStyles     = qw(graph puml);
my @validGraphStructures = qw(enum class struct);
my @validLinkStructures = qw(enum class struct group);
my $errFmtStart     = "<nop>DoxygenPlugin Error: ";
my $errFmtEnd       = "";

#
# Plugin settings passed in URL or by preferences
#
my $subdirsDefault;      # Doxygen created subdirectories to store documents
my $caseSenseDefault;    # Doxygen created files using all lower-case letters

=begin TML

---++ initPlugin($topic, $web, $user) -> $boolean
   * =$topic= - the name of the topic in the current CGI query
   * =$web= - the name of the web in the current CGI query
   * =$user= - the login name of the user
   * =$installWeb= - the name of the web the plugin topic is in
     (usually the same as =$Foswiki::cfg{SystemWebName}=)

*REQUIRED*

Called to initialise the plugin. If everything is OK, should return
a non-zero value. On non-fatal failure, should write a message
using =Foswiki::Func::writeWarning= and return 0. In this case
%<nop>FAILEDPLUGINS% will indicate which plugins failed.

In the case of a catastrophic failure that will prevent the whole
installation from working safely, this handler may use 'die', which
will be trapped and reported in the browser.

__Note:__ Please align macro names with the Plugin name, e.g. if
your Plugin is called !FooBarPlugin, name macros FOOBAR and/or
FOOBARSOMETHING. This avoids namespace issues.

=cut

sub initPlugin {
    my ( $topic, $web, $user, $installWeb ) = @_;

    # check for Plugins.pm versions
    if ( $Foswiki::Plugins::VERSION < 2.0 ) {
        Foswiki::Func::writeWarning( 'Version mismatch between ',
            __PACKAGE__, ' and Plugins.pm' );
        return 0;
    }

    # Preferences are named after Doxygen configuration settings.
    # Get plugin CREATE_SUBDIRS flag
    $subdirsDefault =
      Foswiki::Func::getPreferencesFlag('DOXYGENPLUGIN_CREATE_SUBDIRS') || 0;

    # Get plugin CASE_SENSE_NAMES flag
    $caseSenseDefault =
      Foswiki::Func::getPreferencesFlag('DOXYGENPLUGIN_CASE_SENSE_NAMES') || 0;

    # Register the _DOXYDOT function to handle %DOXYDOT{...}%
    # This will be called whenever %DOXYDOT% or %DOXYDOT{...}% is
    # seen in the topic text.
    Foswiki::Func::registerTagHandler( 'DOXYDOT', \&_DOXYDOT );

    # Register the _DOX function to handle %DOX{...}%
    # This will be called whenever %DOX% or %DOX{...}% is
    # seen in the topic text.
    Foswiki::Func::registerTagHandler( 'DOX', \&_DOX );

    # Plugin correctly initialized
    return 1;
}

# Escape text in code using the same substitutions that Doxygen uses,
# to generate the appropriate file names to link.
# Returns the escaped $name
sub escapeCharsInString {
    my ( $name, $allowDots, $allowUnderscore, $caseSensitive ) = @_;

    # $name - the name of the source item being documented by Doxygen
    # $allowDots - A Doxygen option indicating if "." should not be substituted
    # $allowUnderscore - A Doxygen option indicating if "_" should not be
    #    substituted
    # $caseSensitive - true if the target file system is case sensitive
    $name =~ s/_/__/g  unless ($allowUnderscore);
    $name =~ s/\./_8/g unless ($allowDots);
    $name =~ s/:/_1/g;
    $name =~ s/\//_2/g;
    $name =~ s/</_3/g;
    $name =~ s/>/_4/g;
    $name =~ s/\*/_5/g;
    $name =~ s/&/_6/g;
    $name =~ s/\|/_7/g;
    $name =~ s/!/_9/g;
    $name =~ s/,/_00/g;
    $name =~ s/ /_01/g;
    $name =~ s/\{/_02/g;
    $name =~ s/\}/_03/g;
    $name =~ s/\?/_04/g;
    $name =~ s/\^/_05/g;
    $name =~ s/\%/_06/g;
    $name =~ s/\(/_07/g;
    $name =~ s/\)/_08/g;
    $name =~ s/\+/_09/g;
    $name =~ s/=/_0A/g;
    $name =~ s/\$/_0B/g;
    $name =~ s/\\/_0C/g;
    unless ($caseSensitive) {
        $name =~ s/([A-Z])/_$1/g;
        $name = lc($name);
    }
    return $name;
}

# Return an HTML/wiki formatted string containing the given error message.
sub macroError {

    # $message - the contents of the error message
    my ($message) = @_;

    return $Foswiki::Plugins::SESSION->inlineAlert( 'alerts', 'generic',
        $errFmtStart . $message . $errFmtEnd );
}

# This sub mimics the Doxygen function convertNameToFile in util.cpp.
# I never found any usage of this function that had $allowDots set to
# true, however, the following instances have $allowUnderscore set to
# true:
# 1) Example source files as html
# 2) Cite anchors (haven't used this feature, personally)
# 3) Cross-reference lists (todo, test, bug, deprecated)
# 4) Related pages
#
# CAVEAT: short names are not supported, and probably can't be as
# they're assigned an incrementing number determined by when Doxygen
# processes them.
sub convertNameToFile {
    use Digest::MD5 qw(md5_hex);
    my ( $name, $allowDots, $allowUnderscore, $subdirs, $caseSensitive ) = @_;

    # $name - the name of the source item being documented by Doxygen
    # $allowDots - A Doxygen option indicating if "." should not be substituted
    # $allowUnderscore - A Doxygen option indicating if "_" should not be
    #    substituted
    # $subdirs - if true, subdirectories were created using a hash function
    # $caseSensitive - true if the target file system is case sensitive
    my $result = escapeCharsInString( $name, $allowDots, $allowUnderscore,
        $caseSensitive );
    if ( length($result) >= 128 ) {    # max doxygen file name length
        substr( $result, 128 - 32, -1 ) = md5_hex($result);
    }
    if ($subdirs) {
        my $sigStr = md5_hex($result);

        # Top level directory is the least-significant nibble of the
        # penultimate byte of the hash (char 29).
        # Subdirectory is the last byte of the hash. (char 30-31)
        # Both in hex.
        substr( $sigStr, 30, 0 )  = "/d";
        substr( $sigStr, 0,  29 ) = "d";
        $result = "$sigStr/$result";
    }
    return $result;
}


# Enum enchors are a bit dodgy, but I'm leaving this code here in case
# I manage to figure things out.
#
# One issue is that enums may be stuck in a group page but NOT in the
# class page if, for example, the enum type is defined as a class
# member.  The enum documentation can be in group pages, class pages
# and probably dedicated enum pages.  Point being, it's not really
# clear to me where the definition containing the anchor should be.
#
# There are multiple types of enum anchors, one for the enum itself,
# and one for enum members.  Both use an MD5 hash of the name, but
# enum members use an aggregation of the enum type and the enum
# member.
#
# I'm not even sure that :: is an appropriate scope separator in all
# cases.
#
# @param[in] $enumType The fully-qualified enumeration type.
# @param[in] $enumMember The enumeration member.  Any scope will be
#   stripped from this and replaced with the scope from $enumType.
#   Not sure if this is always appropriate. This is an optional
#   parameter.  If not specified, the anchor for the enum type alone
#   will be returned.
sub getEnumAnchor {
    use Digest::MD5 qw(md5_hex);
    my ($enumType, $enumMember) = @_;
    die("getEnumAnchor called with undefined enumType")
        unless(defined($enumType));
    # According to Doxygen memberdef.cpp (MemberDef::setAnchor(),
    # where where this code was gleaned):
    #     actually the method name is now included twice, which is
    #     silly, but we keep it this way for backward compatibility.
    $enumType =~ s/(.*::(.*))/\1\2/;
    my $enumTypeAnchor = "a" . md5_hex($enumType);
    my $rv = "g" . $enumTypeAnchor;
    if (defined($enumMember)) {
        my $scope = $enumType;
        $scope =~ s/(.*)::.*/\1/;
        my $enumName = $enumMember;
        $enumName =~ s/.*:://;
        my $membName = "\@ $scope::$enumName$enumName";
        my $enumMembAnchor = "a" . md5_hex($membName);
        $rv = "g" . $rv . $enumMembAnchor;
    }
    return $rv;
}

# The function used to handle the %DOXYDOT{...}% macro
# You would have one of these for each macro you want to process.
sub _DOXYDOT {
    my ( $session, $params, $topic, $web, $topicObject ) = @_;

    # $session  - a reference to the Foswiki session object
    #             (you probably won't need it, but documented in Foswiki.pm)
    # $params=  - a reference to a Foswiki::Attrs object containing
    #             parameters.
    #             This can be used as a simple hash that maps parameter names
    #             to values, with _DEFAULT being the name for the default
    #             (unnamed) parameter.
    # $topic    - name of the topic in the query
    # $web      - name of the web in the query
    # $topicObject - a reference to a Foswiki::Meta object containing the
    #             topic the macro is being rendered in (new for foswiki 1.1.x)
    # Return: the result of processing the macro. This will replace the
    # macro call in the final text.

    return macroError("DOXYDOT missing name")
      unless ( exists $params->{_DEFAULT} );

    # SMELL Not sure if this is considered safe.  It lets the user
    # influence the URL's value, which could lead to malicious
    # redirections, though I've tried to filter it as well as I could
    # think of.
    my $subdir        = $params->{'subdir'} || "";
    my $structureName = $params->{_DEFAULT};
    my $structureType = $params->{'stype'} || "class";
    my $graphType     = $params->{'gtype'} || "coll";
    my $graphStyle    = $params->{'style'} || "graph";
    my $graphFormat   = $params->{'format'} || "png";

    my $subdirs = Foswiki::Func::isTrue($params->{'subdirs'}, $subdirsDefault);
    my $caseSense = Foswiki::Func::isTrue(
	$params->{'casesense'}, $caseSenseDefault);

    return macroError( "DOXYDOT: \"$graphFormat\" is not a supported format ("
          . join( ' ', @validFormats )
          . ")" )
      unless grep /^$graphFormat$/, @validFormats;
    return macroError( "DOXYDOT: \"$graphType\" is not a supported type ("
          . join( ' ', @validTypes )
          . ")" )
      unless grep /^$graphType$/, @validTypes;
    return macroError( "DOXYDOT: \"$graphStyle\" is not a supported style ("
          . join( ' ', @validStyles )
          . ")" )
      unless grep /^$graphStyle$/, @validStyles;
    return macroError(
            "DOXYDOT: \"$structureType\" is not a supported structure type ("
          . join( ' ', @validGraphStructures )
          . ")" )
      unless grep /^$structureType$/, @validGraphStructures;

    # characters we definitely DO NOT want in $subdir:
    # :/@?#<>
    return macroError("DOXYDOT: \"$subdir\" contains invalid characters")
      unless ( $subdir =~ /^[A-Za-z0-9_]*$/ );

    # doxygen does not allow dots or underscores in dot diagram file names
    my $baseName =
      $structureType . $structureName . "_" . $graphType . "_" . $graphStyle;
    my $rv = $Foswiki::cfg{Plugins}{DoxygenPlugin}{Root} . "/";
    $rv .= $subdir . "/" if ($subdir);
    $rv .=
      convertNameToFile( $baseName, 0, 0, $subdirs, $caseSense ) . "."
      . $graphFormat;

    return $rv;
}

# The function used to handle the %DOX{...}% macro
# You would have one of these for each macro you want to process.
sub _DOX {
    my ( $session, $params, $topic, $web, $topicObject ) = @_;

    # $session  - a reference to the Foswiki session object
    #             (you probably won't need it, but documented in Foswiki.pm)
    # $params=  - a reference to a Foswiki::Attrs object containing
    #             parameters.
    #             This can be used as a simple hash that maps parameter names
    #             to values, with _DEFAULT being the name for the default
    #             (unnamed) parameter.
    # $topic    - name of the topic in the query
    # $web      - name of the web in the query
    # $topicObject - a reference to a Foswiki::Meta object containing the
    #             topic the macro is being rendered in (new for foswiki 1.1.x)
    # Return: the result of processing the macro. This will replace the
    # macro call in the final text.

    return macroError("DOX missing name")
      unless ( exists $params->{_DEFAULT} );

    # SMELL Not sure if this is considered safe.  It lets the user
    # influence the URL's value, which could lead to malicious
    # redirections, though I've tried to filter it as well as I could
    # think of.
    my $subdir        = $params->{'subdir'} || "";
    my $structureName = $params->{_DEFAULT};
    my $structureType = $params->{'stype'} || "class";
    my $htmlExtension = $params->{'extension'} || ".html";

    my $subdirs = Foswiki::Func::isTrue($params->{'subdirs'}, $subdirsDefault);
    my $caseSense = Foswiki::Func::isTrue(
	$params->{'casesense'}, $caseSenseDefault);

    return macroError(
            "DOX: \"$structureType\" is not a supported structure type ("
          . join( ' ', @validLinkStructures )
          . ")" )
      unless grep /^$structureType$/, @validLinkStructures;

    # characters we definitely DO NOT want in $subdir:
    # :/@?#<>
    return macroError("DOX: \"$subdir\" contains invalid characters")
      unless ( $subdir =~ /^[A-Za-z0-9_]*$/ );
    return macroError("DOX: \"$htmlExtension\" contains invalid characters")
      unless ( $htmlExtension =~ /^[A-Za-z0-9_.]*$/ );

    my $baseName;
    # hurray for special cases
    if ($structureType eq "group") {
        $baseName = $structureType . "_" . $structureName;
    } else {
        $baseName = $structureType . $structureName;
    }
    my $rv = $Foswiki::cfg{Plugins}{DoxygenPlugin}{Root} . "/";
    $rv .= $subdir . "/" if ($subdir);
    $rv .=
	convertNameToFile( $baseName, 0, 0, $subdirs, $caseSense )
	. $htmlExtension;

    return $rv;
}

1;
